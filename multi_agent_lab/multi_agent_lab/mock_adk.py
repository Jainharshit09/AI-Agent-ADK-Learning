# Mock ADK components for testing without the actual Google ADK package
# This allows the code to run and be tested without requiring the full ADK installation

import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime
import json

class MockSession:
    def __init__(self, session_id: str):
        self.id = session_id
        self.created_at = datetime.now()

class MockSessionService:
    def __init__(self):
        self.sessions: Dict[str, MockSession] = {}
    
    async def create_session(self, app_name: str, user_id: str, session_id: str) -> MockSession:
        """Create a mock session"""
        session = MockSession(session_id)
        self.sessions[session_id] = session
        return session

class MockContent:
    def __init__(self, role: str, parts: List['MockPart']):
        self.role = role
        self.parts = parts

class MockPart:
    def __init__(self, text: str):
        self.text = text

class MockEvent:
    def __init__(self, content: Optional[MockContent] = None, is_final: bool = False):
        self.content = content
        self._is_final = is_final
    
    def is_final_response(self) -> bool:
        return self._is_final

class MockAgent:
    def __init__(self, model: str, name: str, description: str, instruction: str, tools: List = None):
        self.model = model
        self.name = name
        self.description = description
        self.instruction = instruction
        self.tools = tools or []

class MockRunner:
    def __init__(self, agent: MockAgent, app_name: str, session_service: MockSessionService):
        self.agent = agent
        self.app_name = app_name
        self.session_service = session_service
    
    async def run_async(self, user_id: str, session_id: str, new_message: MockContent):
        """Mock async runner that simulates agent execution"""
        # Simulate processing time
        await asyncio.sleep(0.1)
        
        # Generate a mock response based on the agent
        if self.agent.name == 'root_orchestrator':
            response_text = f"""
# Learning Roadmap for: {new_message.parts[0].text.split(': ')[1].split('\\n')[0]}

## Overview
This is a comprehensive learning roadmap generated by the multi-agent system.

## Modules
1. **Foundation Concepts** - Core principles and fundamentals
2. **Advanced Topics** - Specialized knowledge areas  
3. **Practical Applications** - Hands-on projects and real-world usage
4. **Expert Level** - Advanced techniques and optimization

## Prerequisites
- Basic programming knowledge
- Understanding of fundamental concepts
- Access to learning resources

## Learning Path
1. Start with foundation concepts
2. Progress through advanced topics
3. Apply knowledge in practical projects
4. Master expert-level techniques

## Resources
- Online courses and tutorials
- Documentation and guides
- Community forums and support
- Hands-on practice projects

This roadmap was generated using the multi-agent workflow system.
            """
        else:
            response_text = f"Mock response from {self.agent.name} agent"
        
        # Create mock final response
        mock_content = MockContent(
            role='assistant',
            parts=[MockPart(text=response_text)]
        )
        
        # Yield the final response
        yield MockEvent(content=mock_content, is_final=True)

# Mock the ADK modules
class MockADK:
    class sessions:
        InMemorySessionService = MockSessionService
    
    class runners:
        Runner = MockRunner
    
    class agents:
        class llm_agent:
            Agent = MockAgent

# Create mock modules
import sys
sys.modules['google.adk.sessions'] = MockADK.sessions
sys.modules['google.adk.runners'] = MockADK.runners  
sys.modules['google.adk.agents.llm_agent'] = MockADK.agents.llm_agent
sys.modules['google.adk'] = MockADK

# Mock genai types
class MockGenaiTypes:
    class Content:
        def __init__(self, role: str, parts: List):
            self.role = role
            self.parts = parts
    
    class Part:
        def __init__(self, text: str):
            self.text = text

sys.modules['google.genai.types'] = MockGenaiTypes

print("Mock ADK components loaded successfully!")
